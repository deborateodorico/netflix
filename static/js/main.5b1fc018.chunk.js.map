{"version":3,"sources":["Tmdb.js","components/MovieRow.js","components/FeaturedMovie.js","components/Header.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","apiNetflix","json","TmdbApiFuncions","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","MovieRow","useState","scrollX","setScrollX","className","onClick","scrollValueLeft","Math","round","window","innerWidth","style","fontSize","scrollValueRigth","listWidth","results","length","marginLeft","width","map","item","key","src","poster_path","alt","FeaturedMovie","firstDate","Date","first_air_date","genres","i","push","name","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","join","Header","black","App","movieList","setMovieList","feacturedData","setFeacturedData","blackHeader","setBlackHeader","useEffect","Tmdb","list","originals","filter","randomChosenFilm","floor","random","chosenFilm","chosenInfoFilm","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","role","aria-label","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAAMA,G,MAAU,oCAeVC,EAAU,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACQC,MAAM,GAAD,OAff,gCAee,OAAeF,IAD5B,cACXG,EADW,gBAEEA,EAAWC,OAFb,cAEXA,EAFW,yBAGVA,GAHU,2CAAH,sDAyEDC,EAnES,CACtBC,YAAY,WAAD,4BAAE,sBAAAL,EAAA,sEAKMF,EAAW,wDAAD,OAAyDD,IALzE,gCAGPS,KAAM,YACNC,MAAO,uBACPC,MALO,eAUMV,EAAW,6CAAD,OAA+CD,IAV/D,gCAQPS,KAAM,WACNC,MAAO,4BACPC,MAVO,gBAeMV,EAAW,2CAAD,OAA4CD,IAf5D,iCAaPS,KAAM,WACNC,MAAO,UACPC,MAfO,gBAoBMV,EAAW,0DAAD,OAA2DD,IApB3E,iCAkBPS,KAAM,SACNC,MAAO,aACPC,MApBO,gBAyBMV,EAAW,yDAAD,OAA0DD,IAzB1E,iCAuBPS,KAAM,SACNC,MAAO,aACPC,MAzBO,gBA8BMV,EAAW,yDAAD,OAA0DD,IA9B1E,mCA4BPS,KAAM,SACNC,MAAO,SACPC,MA9BO,iBAmCMV,EAAW,4DAAD,OAA6DD,IAnC7E,mCAiCPS,KAAM,UACNC,MAAO,UACPC,MAnCO,iBAwCMV,EAAW,yDAAD,OAA0DD,IAxC1E,mCAsCPS,KAAM,cACNC,MAAO,kBACPC,MAxCO,mHAAF,kDAAC,GA4CVC,aAAa,WAAD,4BAAE,WAAOC,EAASC,GAAhB,eAAAX,EAAA,yDACRY,EAAO,IAERF,EAHS,sBAIHC,EAJG,OAKH,UALG,OASH,OATG,uCAMOb,EAAW,UAAD,OAAWY,EAAX,mCAA6Cb,IAN9D,cAMNe,EANM,oDAUOd,EAAW,OAAD,OAAQY,EAAR,mCAA0Cb,IAV3D,eAUNe,EAVM,2CAcNA,EAAO,KAdD,sDAiBHA,GAjBG,4CAAF,qDAAC,I,iDCbFC,MAhDf,YAAmC,IAAD,EAAfN,EAAe,EAAfA,MAAOC,EAAQ,EAARA,MAAQ,EACFM,mBAAS,GADP,mBACzBC,EADyB,KAChBC,EADgB,KAqBhC,OACE,sBAAKC,UAAU,WAAf,UACE,6BAAKV,IACP,qBAAKU,UAAU,iBAAiBC,QApBV,WACtB,IAAIC,EAAkBJ,EAAUK,KAAKC,MAAMC,OAAOC,WAAa,GAC3DJ,EAAkB,IACpBA,EAAkB,GAEpBH,EAAWG,IAeX,SACA,cAAC,IAAD,CAAoBK,MAAO,CAACC,SAAU,QAEtC,qBAAKR,UAAU,kBAAkBC,QAfV,WACvB,IAAIQ,EAAmBX,EAAUK,KAAKC,MAAMC,OAAOC,WAAa,GAC5DI,EAAmC,IAAvBnB,EAAMoB,QAAQC,OAC1BP,OAAOC,WAAaI,EAAYD,IAClCA,EAAoBJ,OAAOC,WAAaI,EAAa,IAEvDX,EAAWU,IASX,SACE,cAAC,IAAD,CAAkBF,MAAO,CAACC,SAAU,QAEpC,qBAAKR,UAAU,qBAAf,SACE,qBAAKA,UAAU,iBAAiBO,MAAO,CACrCM,WAAYf,EACZgB,MAA8B,IAAvBvB,EAAMoB,QAAQC,QAFvB,UAIG,UAAArB,EAAMoB,eAAN,eAAeC,QAAS,GAAKrB,EAAMoB,QAAQI,KAAI,SAACC,EAAMC,GACrD,OACE,qBAAejB,UAAU,iBAAzB,SACE,qBAAKkB,IAAG,yCAAoCF,EAAKG,aAAeC,IAAI,WAAeH,IAD3EA,c,MCCTI,MAxCf,YAAgC,IAARL,EAAO,EAAPA,KAElBM,EAAY,IAAIC,KAAKP,EAAKQ,gBAC1BC,EAAS,GACb,IAAI,IAAIC,KAAKV,EAAKS,OAChBA,EAAOE,KAAKX,EAAKS,OAAOC,GAAGE,MAG7B,IAAIC,EAAcb,EAAKc,SAMvB,OAJGD,EAAYjB,OAAS,MACtBiB,EAAcA,EAAYE,UAAU,EAAG,KAAK,OAI5C,yBAAS/B,UAAU,WAAWO,MAAO,CACnCyB,eAAgB,QAChBC,mBAAoB,SACpBC,gBAAgB,0CAAD,OAA4ClB,EAAKmB,cAAjD,MAHjB,SAKE,qBAAKnC,UAAU,qBAAf,SACE,sBAAKA,UAAU,uBAAf,UACE,qBAAKA,UAAU,iBAAf,SAAiCgB,EAAKoB,gBACtC,sBAAKpC,UAAU,iBAAf,UACE,sBAAKA,UAAU,mBAAf,UAAmCgB,EAAKqB,aAAxC,aACA,qBAAKrC,UAAU,iBAAf,SAAiCsB,EAAUgB,gBAC3C,sBAAKtC,UAAU,oBAAf,UAAoCgB,EAAKuB,kBAAzC,aAAiG,IAA3BvB,EAAKuB,kBAA0B,IAAM,SAE7G,qBAAKvC,UAAU,wBAAf,SAAwC6B,IACxC,sBAAK7B,UAAU,oBAAf,UACC,mBAAGwC,KAAI,iBAAYxB,EAAKyB,IAAMzC,UAAU,wBAAxC,6BACA,mBAAGwC,KAAI,oBAAexB,EAAKyB,IAAMzC,UAAU,yBAA3C,6BAED,sBAAKA,UAAU,mBAAf,UAAkC,iDAAlC,IAA6DyB,EAAOiB,KAAK,iB,MChBpEC,MAjBf,YAA0B,IAATC,EAAQ,EAARA,MACf,OACE,yBAAQ5C,UAAW4C,EAAQ,QAAU,GAArC,UACE,qBAAK5C,UAAU,eAAf,SACE,mBAAGwC,KAAK,IAAR,SACE,qBAAKtB,IAAI,mGAAmGE,IAAI,gBAGpH,qBAAKpB,UAAU,eAAf,SACE,mBAAGwC,KAAK,IAAR,SACE,qBAAKtB,IAAI,yEAAyEE,IAAI,uBCqDjFyB,MA3Df,WAAgB,IAAD,EACqBhD,mBAAS,IAD9B,mBACNiD,EADM,KACKC,EADL,OAE6BlD,mBAAS,MAFtC,mBAENmD,EAFM,KAESC,EAFT,OAGyBpD,oBAAS,GAHlC,mBAGNqD,EAHM,KAGOC,EAHP,KAmCb,OA/BAC,qBAAU,YACK,uCAAG,oCAAArE,EAAA,sEACGsE,EAAKjE,cADR,cACVkE,EADU,OAEdP,EAAaO,GAGPC,EAAYD,EAAKE,QAAO,SAAA9B,GAAC,MAAe,cAAXA,EAAErC,QAC/BoE,EAAmBtD,KAAKuD,MAAMvD,KAAKwD,UAAYJ,EAAU,GAAGhE,MAAMoB,QAAQC,OAAQ,IAClFgD,EAAaL,EAAU,GAAGhE,MAAMoB,QAAQ8C,GAPhC,SAQeJ,EAAK7D,aAAaoE,EAAWnB,GAAI,MARhD,OAQRoB,EARQ,OASdZ,EAAiBY,GATH,4CAAH,qDAWbC,KACF,IAGAV,qBAAU,WACR,IAAMW,EAAiB,WAClB1D,OAAO2D,QAAU,GAClBb,GAAe,GAEfA,GAAe,IAKnB,OAFA9C,OAAO4D,iBAAiB,SAAUF,GAE3B,WACL1D,OAAO6D,oBAAoB,SAAUH,MAEzC,IAGE,sBAAK/D,UAAU,QAAf,UACE,cAAC,EAAD,CAAQ4C,MAAOM,IACdF,GACC,cAAC,EAAD,CAAehC,KAAMgC,IAEvB,yBAAShD,UAAU,QAAnB,SACG8C,EAAU/B,KAAI,SAACC,EAAMC,GAClB,OAAO,cAAC,EAAD,CAAoB3B,MAAO0B,EAAK1B,MAAOC,MAAOyB,EAAKzB,OAApC0B,QAG5B,gDACY,sBAAMkD,KAAK,MAAMC,aAAW,gBAA5B,0BADZ,2BACgF,uBADhF,mCAEkC,uBAFlC,6CAKCtB,EAAUlC,QAAU,GACnB,qBAAKZ,UAAU,UAAf,SACE,qBAAKkB,IAAI,uEAAuEE,IAAI,qBCxD9FiD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5b1fc018.chunk.js","sourcesContent":["const API_KEY = '7eadf8c508fb2b290f94eff49601bd7c';\nconst API_BASE = 'https://api.themoviedb.org/3';\n\n/*\nÉ NECESSÁRIO:\n- Os originais da netflix;\n- Recomendados (trending); \n- Em alta (top rated);\n- Ação\n- Comédia\n- Terror\n- Romance \n- Documentário\n*/\n\nconst basicFetch = async (endpoint) => {\n  const apiNetflix = await fetch(`${API_BASE}${endpoint}`);\n  const json = await apiNetflix.json();\n  return json;\n};\n\nconst TmdbApiFuncions = {\n  getHomeList: async () => {\n    return [\n      {\n        slug: 'originals',\n        title: 'Originais do Netflix',\n        items: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`),\n      },\n      {\n        slug: 'trending',\n        title: 'Recomendados para Você',\n        items: await basicFetch( `/trending/all/week?language=pt-BR&api_key=${API_KEY}`),\n      },\n      {\n        slug: 'toprated',\n        title: 'Em Alta',\n        items: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`),\n      },\n      {\n        slug: 'action',\n        title: 'Ação',\n        items: await basicFetch(`/discover/movie?language=pt-BR&with_genres=28&&api_key=${API_KEY}`),\n      },\n      {\n        slug: 'comedy',\n        title: 'Comédia',\n        items: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`),\n      },\n      {\n        slug: 'horror',\n        title: 'Terror',\n        items: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`),\n      },\n      {\n        slug: 'romance',\n        title: 'Romance',\n        items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`),\n      },\n      {\n        slug: 'documentary',\n        title: 'Documentário',\n        items: await basicFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`),\n      }\n    ]\n  },\n    getMovieInfo: async (movieId, type) => {\n      let info = {};\n\n      if(movieId) {\n        switch(type) {\n          case 'movie':\n            info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`);\n          break;\n\n          case 'tv':\n            info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);\n          break;\n\n          default:\n            info = null;\n          break;\n        }\n        return info;\n      }\n  }\n}\n\nexport default TmdbApiFuncions;\n","import react, { useState } from \"react\";\nimport './MovieRow.css';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nfunction MovieRow({title, items}) {\n  const [scrollX, setScrollX] = useState(0);\n\n  // para empurrar a lista para a esquerda a margem sempre tem que ser negativa.\n  const handleLeftArrow = () => {\n    let scrollValueLeft = scrollX + Math.round(window.innerWidth / 2); // para definir o numero baseado no tamanho da tela do usuário(metade da tela nesse caso)\n    if (scrollValueLeft > 0) {\n      scrollValueLeft = 0; // o scroll so vai até chegar em zero, que é o filme inicial\n    }\n    setScrollX(scrollValueLeft);\n  };\n\n  const handleRigthArrow = () => {\n    let scrollValueRigth = scrollX - Math.round(window.innerWidth / 2);\n    let listWidth = items.results.length * 200;\n    if (window.innerWidth - listWidth > scrollValueRigth) {\n      scrollValueRigth = (window.innerWidth - listWidth) - 60; // subtrai de 60 para respeitar o padding de 30px de cada lado\n    }\n    setScrollX(scrollValueRigth)\n  };\n\n  return(\n    <div className=\"movierow\">\n      <h2>{title}</h2>\n    <div className=\"movierow--left\" onClick={handleLeftArrow}>\n    <NavigateBeforeIcon style={{fontSize: 50}}/>\n    </div>\n    <div className=\"movierow--rigth\" onClick={handleRigthArrow}>\n      <NavigateNextIcon style={{fontSize: 50}}/>\n    </div>\n      <div className=\"movierow--listarea\">\n        <div className=\"movierow--list\" style={{\n          marginLeft: scrollX,\n          width: items.results.length * 200\n        }}>\n          {items.results?.length > 0 && items.results.map((item, key) => {\n            return (\n              <div key={key} className=\"movierow--item\">\n                <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt=\"posters\" key={key} />\n              </div>\n              );\n            })}\n        </div>\n        </div>\n    </div>\n  );\n} \n\nexport default MovieRow;\n","import react from \"react\";\nimport './FeacturedMovie.css';\n\nfunction FeaturedMovie({item}) {\n\n  let firstDate = new Date(item.first_air_date);\n  let genres = [];\n  for(let i in item.genres) {\n    genres.push(item.genres[i].name);\n  }\n\n  let description = item.overview;\n  // para verificar o tamanho do texto da descricao\n  if(description.length > 200) {\n    description = description.substring(0, 200)+'...'; // retorna a parte da string entre os índices inicial e final, ou até o final da string. concatenado com os ...\n  }\n\n  return (\n    <section className=\"featured\" style={{\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n      backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\n    }}>\n      <div className=\"featured--vertical\">\n        <div className=\"featured--horizontal\">\n          <div className=\"featured--name\">{item.original_name}</div>\n          <div className=\"featured--info\">\n            <div className=\"featured--points\">{item.vote_average} pontos</div>\n            <div className=\"featured--year\">{firstDate.getFullYear()}</div>\n            <div className=\"featured--seasons\">{item.number_of_seasons} temporada{item.number_of_seasons !== 1 ? 's' : ''}</div>\n          </div>\n          <div className=\"featured--description\">{description}</div>\n          <div className=\"featured--buttons\">\n           <a href={`/watch/${item.id}`} className=\"featured--watchbutton\">► Assistir</a>\n           <a href={`/list/add/${item.id}`} className=\"featured--mylistbutton\">+Minha Lista</a>\n          </div>\n          <div className=\"featured--genres\"><strong>Gêneros:</strong> {genres.join(', ')}</div>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default FeaturedMovie;\n","import React from \"react\";\nimport './Header.css';\n\nfunction Header({black}) {\n  return(\n    <header className={black ? 'black' : ''}>\n      <div className=\"header--logo\">\n        <a href=\"/\">\n          <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/7a/Logonetflix.png/1600px-Logonetflix.png\" alt=\"netflix\"/>\n        </a>\n      </div>\n      <div className=\"header--user\">\n        <a href=\"/\">\n          <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"usuário\"/>\n        </a>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from \"./components/FeaturedMovie\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  const [movieList, setMovieList] = useState([]);\n  const [feacturedData, setFeacturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n  useEffect(() => {\n    const loadAll = async () => {\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      // pegando o feactured\n      const originals = list.filter(i => i.slug === 'originals');\n      const randomChosenFilm = Math.floor(Math.random() * (originals[0].items.results.length -1)); // pegando aleatoriamente o filme\n      const chosenFilm = originals[0].items.results[randomChosenFilm]; // filme escolhido\n      const chosenInfoFilm = await Tmdb.getMovieInfo(chosenFilm.id, 'tv');\n      setFeacturedData(chosenInfoFilm);\n    }\n    loadAll();\n},[])\n\n// para adicionar um evento de monitoramento da própria pagina, ref a barra do header.\n  useEffect(() => {\n    const scrollListener = () => {\n      if(window.scrollY > 10) {\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    }\n    window.addEventListener('scroll', scrollListener);\n\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    }\n},[])\n\n  return (\n    <div className=\"pages\">\n      <Header black={blackHeader}/>\n      {feacturedData && \n        <FeaturedMovie item={feacturedData} />\n      }\n      <section className=\"lists\">\n        {movieList.map((item, key) => {\n            return <MovieRow key={key} title={item.title} items={item.items}/>\n        })}\n      </section>\n      <footer>\n        Feito com <span role=\"img\" aria-label=\"coração\">♥︎</span> por Débora Teodorico<br/>\n        Direitos de imagem para Netflix <br/>\n        Dados utilizados do site Themoviedb.org\n      </footer>\n      {movieList.length <= 0 &&\n        <div className=\"loading\">\n          <img src=\"https://media.filmelier.com/noticias/br/2020/03/Netflix_LoadTime.gif\" alt=\"Carregando\" />\n        </div>\n      }\n    </div>\n  );\n}\nexport default App;\n\n// para saber a posicao do sroll, usamos o window.scrollY, onde o Y é a vertical.","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}